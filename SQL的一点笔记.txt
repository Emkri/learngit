数据库有三类模型：
	1.层次模型：
		类似于树
	2.网状模型：
		类似于图
	3.关系模型：
		类似于二维表格，最常见，因为好理解和简单

安装MySQL：
	在 https://dev.mysql.com/downloads/mysql/
把路径添加到环境变量之后，就可以通过命令行输入
	mysql -u root -p
再输密码来进入MySQL服务器

关系模型中：一行就是一个记录 一列就是一系列字段

关系数据库中表与表之间是存在着“一对一”“一对多”“多对多”关系的

关系表中，两个记录是不能完全重复的，也就是说，两个字段应该在某个字段上不同，那么该字段便称为
	主键
因为主键是用来唯一定位记录的，因此最好不要修改
就当作不得修改最好，那么就不要使用有意义的内容，使用
	无意义的内容
如此，就没有修改的必要
一般，将这个字段命名为
	id
一般使用两种类型作id：
	自增整数类型：插入一条记录时，生成的id，分配的是一个自增的整数
	全局唯一GUID类型：全局唯一的字符串

还可以使用联合主键来识别记录，只要多个字段不完全相同即可。然而十分复杂，其实尽量不使用

外键：将本表数据与外部表相联系的字段，其是由外键约束实现的，是这么约束的：
	ALTER TABLE chart	//对chart的字段的增删改
	ADD CONSTRAINT constraintName	//新建约束
	FOREIGN KEY (targetCol)		//外键（约束字段）
	REFERENCES foreignTable(referredCol)	//关联表与其字段
实际上，外键比较降低效率，因此可能使用别的约束方式而非如此
删除外键：DROP FOREIGN KEY contraintName

多对多的方式，是两个一对多，通过一个中间表来实现的：
	多 对 一（中间表） 对 多

索引：对单列或是多列的值进行预排序的数据结构，不必搜，可以直接定位（也就是哈希表？不太清楚），写法如下：
	ALTER TABLE chart
	ADD INDEX indexName（col）
如此，就对对应的col建立了索引
允许多个参数（列），如下：indexName(col1,col2)
主键会自动创建索引的，因为其独特，自然效率最高
即便查找很快，但建立索引是需要开销的，修改和删除亦然

除此之外，还有
	唯一索引
对 INDEX 添加 修饰符UNIQUE来实现，
如此，对应列中的内容就必须是唯一的了

对于唯一性的保证实际不止如此，还可以如此写：
ADD CONSTRAINT uniconstr UNIQUE (col)
通过加constraint，对col做unique，也能保证值的唯一性

SELECT * FROM targetTable;
SELECT 是查询
* 是 所有字段，可以换别的字段，也可以加逗号之后再加字段，原来这叫作投影查询
FROM targetTable 是查询源
返回的是一个二维表
字段后加空格可以添加别名

SELECT 也可以做计算，但不是重点，重点用法是
	判断是否连接到了数据库，如下
SELECT 1;
如此，即可测试

WHERE 可以作筛选
可用 NOT AND OR 来做条件运算符，优先级向右递减，可以添加括号修饰
还有 > < = 也能做组合，其中不同于高级语言
不等为<>
相等为=
还有一个比较特殊的相似判断： LIKE'%AA%A%'就可以将与明确的部分相同的值筛选出来

ORDER BY 后面可以加相应的字段以做排序，再加ASC(默认有，可不写)做升序或是DESC做降序，如下
	ORDER BY score DESC
还可以多轮排序，逗号加字段嘛，这样就会按给出的次序依次排序
BTW，ORDER BY 要放在 WHERE 后面

LIMIT：限制显示记录的上限
OFFSET：显示的第一个记录的偏置，可以不写 默认offset0

SELECT COUNT(*) FROM 查询所有字段的行数，当然*可以换别的字段 一样是可以取别名的，加空格就好
不只COUNT这一聚合函数，还有别的，例如：
SUM AVG MAX MIN

GROUP BY 可以根据字段来将记录预先分块，一个块只能输出一个记录，因此如果一个块中某个字段有多个值，那么就会出错
此称之为 分组聚合

多表查询：可以对多表进行查询，字段是多表字段的加和，记录就是多表记录的积

可以通过 chart.col 来明确的指出对应的字段
不只字段可以有别名，其实表本身也可以有别名，如此就可以写成
	select
	c.col col
	from chart c;
更加方便

连接查询：
JOIN 一张表，就可以引入其中的字段，同时，join的方式不同，分为：
inner join：交集，都有的才写入
left outer join：左表有的都写入
right outer join：右表有的都写入
full outer join：只要有，都写入

还需要加一个 ON ，以确定连接条件，如 s.id=c.id

插入记录：INSERT,语法如下：
	INSERT INTO targetCHART (col1,col2,....)
	VALUES
	(val1,val2,val3),
	(val1,val2,val3)...;
告知需要插入的对应表，以及对应字段，之后输入值，可以插入多个
插入的字段是可以不与表内字段顺序相同，但是插入的值需要与预告的字段顺序一致
其实不是所有的字段都是需要插入的，就比如自增主键是自动分配的，不需要专门写

更新记录：UPDATE，语法如下：
	update chart
	set 
		col1=val1，
		col2=val2...;
当然可以加入where来筛选记录
set val的时候，是可以使用表达式的，比如：col1=col1*2;

删除记录：DELETE，语法如下：
	delete from chart
一般搭配where使用

关于database：
	查询database，打	
		show databases;
	增加database，打
		create database newdb;
	删除database，打
		drop database targetDB;
	转到对应database，打
		use targetDB;

看看table：
	show tables;
看看table的结构:
	desc targetTBL;
看看table怎么写的：
	show create table targetTBL;
创建table:
	create table newTBL;//但其实不只吧，还要填内容，不知道怎么填呢
删除table：
	drop table targetTBL;
改table：
	alter table targetTBL ...;//后面要加具体需求呐
	需求没讲清楚怎么弄呢，后面再补充吧



